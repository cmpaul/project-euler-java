package com.example.euler;

import java.util.ArrayList;
import java.util.List;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 * @author chris
 *
 */
public class Solution002 {
	
	/**
	 * Returns the nth fibonacci number.
	 * @param n int
	 * @return long
	 */
    public static long fibonacci(int n) {
        if (n <= 1) return n;
        else return fibonacci(n-1) + fibonacci(n-2);
    }

    /**
     * Returns a list of fibonacci numbers that fall under the max value.
     * @param maxValue long
     * @return List<Long>
     */
	public static List<Long> getFibSequence(long maxValue) {
		ArrayList<Long> seq = new ArrayList<Long>();
		int current_index = 2; // Start at the 2nd number (1), based on problem description
		long fib;
		while (true) {
			fib = fibonacci(current_index++);
			if (fib <= maxValue) {
				seq.add(fib);
			} else {
				break;
			}
		}
		return seq;
	}

	/**
	 * Finds the sum of even numbers in the fibonacci series
	 * whose values do not exceed 4mil.
	 * 
	 * @return Long
	 */
	public static Long getEvenFibonacciSum() {
		int iter = 2;
		long nextFib = 0;
		long sum = 0;
		do {
			if (nextFib % 2 == 0) {
				sum += nextFib;
			}
			nextFib = fibonacci(iter++);
		} while (nextFib < 4000000L);
		return sum;
	}
}
